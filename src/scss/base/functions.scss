//REM
@function rem($px) {
	@return math.div($px, 16) + rem;
}
@function rem-to-number($rem) {
	@return to-number(str-replace($rem, 'rem')) * 16;
}
//EM
@function em($px, $current: 16) {
	$result: math.div($px, $current) + em;
	@return $result;
}
@function em-to-number($em) {
	@return to-number(str-replace($em, 'em')) * 16;
}
// FLUID
@mixin fluid($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
	@if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
		$widthFrom: $maxWidth;
	}
	// Брейк-поинты в EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Формула плавающего значения
	// Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;
	$flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;

	$propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};

	@if $widthFrom == $containerWidth or $widthFrom == $maxWidth or $keepSize == 1 or $keepSize == 2 {
		@media (min-width: $widthFromMedia) {
			#{$property}: rem($startSize);
		}
	}
	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
		#{$property}: $propertyValue;
	}
	@if $widthTo == $minWidth or $keepSize == 1 or $keepSize == 3 {
		@media (max-width: $widthToMedia) {
			#{$property}: rem($minSize);
		}
	}
}
// EXTRA
@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);
	
	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}
	
	@return $string;
}
@function to-number($value) {
	$result: 0;
	$digits: 0;
	$minus: str-slice($value, 1, 1) == '-';
	$numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
	@for $i from if($minus, 2, 1) through str-length($value) {
	  $character: str-slice($value, $i, $i);
  
	  @if (index(map-keys($numbers), $character) or $character == '.') {
		@if $character == '.' {
		  $digits: 1; 
		} @else if $digits == 0 {
		  $result: $result * 10 + map-get($numbers, $character);  
		} @else {
		  $digits: $digits * 10;
		  $result: $result + math.div(map-get($numbers, $character), $digits);
		}
	  }
	}
  
	@return if($minus, -$result, $result);;
}